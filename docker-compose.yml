services:
  web:
    build:
      context: .
      dockerfile: Dockerfile  # Asegúrate de que sea el nombre correcto del Dockerfile
    entrypoint: ["sh", "./scripts/entrypoint.sh"]
    command: ["sh", "./scripts/start"]

    volumes:
      - .:/API_PROJECT  # Alineamos con APP_DIR del Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env  # Cargar las variables de entorno
    environment:
      - DJANGO_SETTINGS_MODULE=app.config.settings.local
    depends_on:
      - db
      - redis
    networks:
      - apipython_net

  db:
    image: postgres:13  # Puedes usar una imagen oficial de PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    stop_grace_period: 1m  # Tiempo que espera para terminar los procesos antes de forzar el cierre
    stop_signal: SIGINT  # Envía la señal de interrupción "SIGINT
    networks:
      - apipython_net

  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
    networks:
      - apipython_net

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.config.celery_setup worker --loglevel=info
    volumes:
      - .:/API_PROJECT
    depends_on:
      - redis
      - db
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=app.config.settings.base
    networks:
      - apipython_net
    stop_grace_period: 1m
    stop_signal: SIGINT

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.config.celery_setup beat --loglevel=info
    volumes:
      - .:/API_PROJECT
    depends_on:
      - redis
      - db
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=app.config.settings.base
    networks:
      - apipython_net
    stop_grace_period: 1m
    stop_signal: SIGINT

volumes:
  postgres_data:

networks:
  apipython_net:
    driver: bridge
